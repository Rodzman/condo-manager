generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_DIRECT")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String   @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  password      String?
  role          String     @default("resident")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  accounts      Account[]
  documents     Document[]
  sessions      Session[]
  units         Unit[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Unit {
  id           String        @id @default(cuid())
  ownerId      String        @map("owner_id")
  number       Int
  floor        Int
  tower        String
  rooms        Int
  size         Int
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  invoices     Invoice[]
  maintenance  Maintenance[]
  reservations Reservation[]
  residents    Resident[]
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  vehicles     Vehicle[]
  visitors     Visitor[]

  @@unique([tower, floor, number])
  @@map("units")
}

model Resident {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  age       Int?
  unitId    String    @map("unit_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  unit      Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  vehicles  Vehicle[]

  @@map("residents")
}

model Vehicle {
  id         String   @id @default(cuid())
  residentId String   @map("resident_id")
  plate      String   @unique
  color      String
  brand      String
  model      String
  year       Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  unitId     String?
  resident   Resident @relation(fields: [residentId], references: [id], onDelete: Cascade)
  Unit       Unit?    @relation(fields: [unitId], references: [id])

  @@map("vehicles")
}

model Visitor {
  id        String     @id @default(cuid())
  name      String
  phone     String
  unitId    String     @map("unit_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  visitLogs VisitLog[]
  unit      Unit       @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@map("visitors")
}

model Maintenance {
  id          String   @id @default(cuid())
  name        String
  unitId      String   @map("unit_id")
  description String
  status      String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  unit        Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@map("maintenance")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("announcements")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("events")
}

model Invoice {
  id          String    @id @default(cuid())
  unitId      String    @map("unit_id")
  amount      Decimal   @db.Decimal(10, 2)
  dueDate     DateTime
  isPaid      Boolean   @default(false)
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  unit        Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  payments    Payment[]

  @@map("invoices")
}

model Payment {
  id            String   @id @default(cuid())
  invoiceId     String   @map("invoice_id")
  amount        Decimal  @db.Decimal(10, 2)
  paymentDate   DateTime
  paymentMethod String
  reference     String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  amount      Decimal  @db.Decimal(10, 2)
  category    String
  paymentDate DateTime
  description String?
  receipt     String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("expenses")
}

model Employee {
  id         String        @id @default(cuid())
  name       String
  email      String?
  phone      String
  position   String
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  activities ActivityLog[]
  shifts     Shift[]
  tasks      Task[]

  @@map("employees")
}

model Shift {
  id         String   @id @default(cuid())
  employeeId String   @map("employee_id")
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("shifts")
}

model Task {
  id          String    @id @default(cuid())
  employeeId  String    @map("employee_id")
  title       String
  description String
  status      String    @default("pending")
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model ActivityLog {
  id         String   @id @default(cuid())
  employeeId String   @map("employee_id")
  action     String
  details    String?
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model InventoryItem {
  id          String              @id @default(cuid())
  name        String
  description String?
  category    String
  quantity    Int
  unit        String
  minQuantity Int
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  movements   InventoryMovement[]

  @@map("inventory_items")
}

model InventoryMovement {
  id           String        @id @default(cuid())
  itemId       String        @map("item_id")
  quantity     Int
  reason       String
  requestedBy  String?
  approvedBy   String?
  movementDate DateTime      @default(now())
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  item         InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("inventory_movements")
}

model CommonArea {
  id           String        @id @default(cuid())
  name         String
  description  String?
  capacity     Int
  openTime     String?
  closeTime    String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  reservations Reservation[]

  @@map("common_areas")
}

model Reservation {
  id              String             @id @default(cuid())
  areaId          String             @map("area_id")
  unitId          String             @map("unit_id")
  startTime       DateTime
  endTime         DateTime
  purpose         String
  guestCount      Int                @default(0)
  status          String             @default("pending")
  approvedBy      String?
  rejectionReason String?
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  guests          ReservationGuest[]
  area            CommonArea         @relation(fields: [areaId], references: [id], onDelete: Cascade)
  unit            Unit               @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model ReservationGuest {
  id            String      @id @default(cuid())
  reservationId String      @map("reservation_id")
  name          String
  document      String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@map("reservation_guests")
}

model DocumentCategory {
  id          String     @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  documents   Document[]

  @@map("document_categories")
}

model Document {
  id          String            @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileType    String
  fileSize    Int
  categoryId  String?           @map("category_id")
  isPublic    Boolean           @default(false)
  uploadedBy  String
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  userId      String?
  category    DocumentCategory? @relation(fields: [categoryId], references: [id])
  User        User?             @relation(fields: [userId], references: [id])

  @@map("documents")
}

model Chat {
  id           String    @id @default(cuid())
  participants String[]
  isGroup      Boolean   @default(false)
  groupName    String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  messages     Message[]

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  chatId    String   @map("chat_id")
  senderId  String   @map("sender_id")
  content   String
  readBy    String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model VisitLog {
  id           String    @id @default(cuid())
  visitorId    String    @map("visitor_id")
  entryTime    DateTime
  exitTime     DateTime?
  authorizedBy String?
  vehicle      String?
  notes        String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  visitor      Visitor   @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@map("visit_logs")
}

model SecurityIncident {
  id           String   @id @default(cuid())
  title        String
  description  String
  incidentDate DateTime
  location     String
  reportedBy   String
  status       String   @default("open")
  severity     String
  resolution   String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("security_incidents")
}
